ext.mpsVersion = "2024.1.1"
ext.languageName = "vimotest"

ext.mpsPlugins = [ ]

ext.customMpsPlugins = [
    "alfi": "https://github.com/vimotest/mps-alfi/releases/download/1.1.3-alpha2/alfi.zip",
    "CppBaseLanguage": "https://github.com/Fumapps/CppBaseLanguage/releases/download/2024.1.2/CppBaseLanguage.zip"
]

apply from: 'gradle/init-gradle-scripts.gradle'
apply from: 'gradle/sandbox/make-project-sandbox.gradle'
apply from: 'gradle/sandbox/package-generated-code.gradle'

task setupSubmodules {
    description = "Initialize and update Git submodules"
    group = "build setup"

    onlyIf {
        def submoduleDir = new File("submodules/mps-vimotest-samples")
        !submoduleDir.isDirectory() || submoduleDir.listFiles().length == 0
    }

    doLast {
        def os = System.getProperty("os.name").toLowerCase()
        def command = 'git submodule update --init --recursive'

        if (os.contains("win")) {
            command = ["cmd", "/c", command]
        } else {
            command = ["sh", "-c", command]
        }

        exec {
            commandLine = command
        }
    }
}

task prepareMps {
    group 'mps'
    dependsOn 'buildOsSpecificBundle'
    doLast {
        def os = System.getProperty("os.name").toLowerCase()
        if (os.contains("mac") && !file("$buildDir/mps-bundle/mps").exists()) {
            println "Creating a symbolic link to the MPS bundle"
            exec {
                commandLine = ["ln", "-s", "$buildDir/mps-bundle/Contents", "$buildDir/mps-bundle/mps"]
            }
        }
    }
}

task mpsBuild {
    group 'mps'
    dependsOn setupSubmodules, 'mpsAntGenerate', 'mpsAntBuild'
}

task mpsClean {
    group 'mps'
    dependsOn 'mpsAntClean', 'mpsAntCleanSources'
}

task mpsTest {
    group 'mps'
    dependsOn 'mpsAntCheck', 'parseTestReportAfterAntCheck'
}

tasks['mpsOpenProjectInMpsForCurrentOs'].mustRunAfter(setupSubmodules)
task openProjectInMps {
    group 'mps'
    dependsOn setupSubmodules, 'mpsOpenProjectInMpsForCurrentOs'
}

task buildAndOpenProjectInMps {
    group 'mps'
    dependsOn mpsBuild, openProjectInMps
}

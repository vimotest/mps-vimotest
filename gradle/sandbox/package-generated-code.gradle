ext {
    codeGenTargetDir = "$buildDir/code-gen"
}

task packageGeneratedCode {
    group 'vimotest-sandbox'


    doFirst {
        file(codeGenTargetDir).deleteDir()
        file(codeGenTargetDir).mkdir()
        file("$codeGenTargetDir/sandbox").mkdir()
    }

    doLast {
        def artifactsDir = "$buildDir/artifacts/mps-vimotest/tests/"
        copyGeneratedCode("$artifactsDir/de.vimotest.sandbox-src.jar", "sandbox")
    }
}

private def copyGeneratedCode(String sourcesArtifact, String targetDirName) {
    def targetDir = "$ext.codeGenTargetDir/$targetDirName"

    copy {
        from zipTree(sourcesArtifact)
        into "$targetDir/cpp"
        include('**/*.cpp', '**/*.h', '**/*.hpp', '**/*.cmake')
    }
    copy {
        from "$projectDir/solutions/de.vimotest.$targetDirName/scripts/cpp"
        into "$targetDir/cpp"
    }

    copy {
        from zipTree(sourcesArtifact)
        into "$targetDir/java/src/main/java"
        include('**/*.java')
    }
    copy {
        from "$projectDir/solutions/de.vimotest.$targetDirName/scripts/java"
        into "$targetDir/java"
    }
    moveJavaSourcesToTestDir(targetDir)

    copy {
        from zipTree(sourcesArtifact)
        into "$targetDir/alf"
        include('**/*.alf')
    }
    squashIntermediateDirs(new File("$targetDir/alf"))

    def dirsToDelete = []
    file(targetDir).eachFileRecurse { if (onlyContainsEmptyDirs(it) && !onlyContainsEmptyDirs(it.parentFile)) { dirsToDelete.add(it) } }
    dirsToDelete.each { it.deleteDir() }
}

private static boolean onlyContainsEmptyDirs(File dir) {
    if (!dir.isDirectory()) {
        return false
    }

    def subFiles = dir.listFiles()
    if (subFiles.length == 0) {
        return true
    }

    return subFiles.every {
        it.isDirectory() && onlyContainsEmptyDirs(it)
    }
}

private def squashIntermediateDirs(File baseDir, boolean root = true) {
    if (!baseDir.isDirectory()) {
        return
    }

    baseDir.eachFile { file ->
        if (file.isDirectory()) {
            squashIntermediateDirs(file, false)
        }
    }

    if (root) {
        return
    }

    def subFiles = baseDir.listFiles()

    if (subFiles.every { it.isDirectory() }) {
        subFiles.each { subDir ->
            subDir.eachFile { subFile ->
                subFile.renameTo(new File(baseDir.parentFile, subFile.name))
            }
            subDir.deleteDir()
        }
        baseDir.deleteDir()
    }
}

private void moveJavaSourcesToTestDir(String targetDir) {
    def javaDir = "$targetDir/java/src/main/java"
    def testDir = "$targetDir/java/src/test/java"

    file(javaDir).eachFileRecurse { file ->
        if (file.isFile() && file.text.contains("org.junit.jupiter")) {
            def relativePath = file.path.substring(javaDir.length() + 1)
            def testFile = new File(testDir, relativePath)
            testFile.parentFile.mkdirs() // Ensure the target directory exists
            file.renameTo(testFile)
            println "Moved $file to $testFile"
        }

    }
}

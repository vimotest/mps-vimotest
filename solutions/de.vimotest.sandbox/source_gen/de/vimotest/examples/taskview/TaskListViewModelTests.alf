

private import Testing ;

class TaskListViewModelTests {
  
  private sut : TaskListViewModel  ;
  
  private contextProvider : TaskListViewModelContextProvider  ;
  
  
  protected BeforeTest (  ) {
  this.contextProvider = new TaskListViewModelContextProviderImpl (  );
   this.contextProvider.Init (  );
 }
  
  
  public Load_Tasks_and_Add_New_given_sampleTasks_when_LoadView_and_click_AddNewTask_then_Tasks_has_3_rows_and_selected_row_handle_2_and_AddNewTask_is_enabled_and_DeleteTask_is_enabled (  ) {
  this.given_sampleTasks (  );
   this.BuildSut (  );
   this.when_LoadView (  );
   this.when_click_AddNewTask (  );
   this.then_Tasks_has_3_rows_and_selected_row_handle_2 (  );
   this.then_AddNewTask_is_enabled (  );
   this.then_DeleteTask_is_enabled (  );
 }
  
  public Load_Empty_Tasks_given_when_LoadView_then_Tasks_has_0_rows (  ) {
  this.BuildSut (  );
   this.when_LoadView_1 (  );
   this.then_Tasks_has_0_rows (  );
 }
  
  public Load_one_Task_with_all_values_given_oneTask_when_LoadView_then_Tasks_has_1_rows (  ) {
  this.given_oneTask (  );
   this.BuildSut (  );
   this.when_LoadView_2 (  );
   this.then_Tasks_has_1_rows (  );
 }
  
  public Initial_selection_given_twoTasks_when_LoadView_then_Tasks_has_2_rows_and_selected_row_handle_0 (  ) {
  this.given_twoTasks (  );
   this.BuildSut (  );
   this.when_LoadView_3 (  );
   this.then_Tasks_has_2_rows_and_selected_row_handle_0 (  );
 }
  
  public Load_Tasks_with_all_three_priority_levels_given_priorityCombinations_when_LoadView_then_Tasks_has_3_rows (  ) {
  this.given_priorityCombinations (  );
   this.BuildSut (  );
   this.when_LoadView_4 (  );
   this.then_Tasks_has_3_rows (  );
 }
  
  public Due_Date_from_2023_given_dueDate2023_when_LoadView_then_Tasks_has_1_rows (  ) {
  this.given_dueDate2023 (  );
   this.BuildSut (  );
   this.when_LoadView_5 (  );
   this.then_Tasks_has_1_rows_1 (  );
 }
  
  public Due_Date_Tooltip_given_dueDate2024_when_LoadView_then_Tasks_has_1_rows (  ) {
  this.given_dueDate2024 (  );
   this.BuildSut (  );
   this.when_LoadView_6 (  );
   this.then_Tasks_has_1_rows_2 (  );
 }
  
  
  protected BuildSut (  ) {
  this.sut = this.contextProvider.BuildSut (  );
 }
  
  
  // Given Helper Definitions

  
  private sampleTasks : String = "[ { id:\"0\", name:\"Exercise\", priority:\"low\", dueDate:\"2024/01/04\" },\n  { id:\"1\", name:\"Taxes\", priority:\"high\", dueDate:\"2023/12/31\" } ]";
  
  public given_sampleTasks (  ) {
  this.contextProvider.SetDataTableJson ( this.sampleTasks );
 }
  
  private oneTask : String = "[ { id:\"0\", name:\"A\", priority:\"low\", dueDate:\"2024/12/01\" } ]";
  
  public given_oneTask (  ) {
  this.contextProvider.SetDataTableJson ( this.oneTask );
 }
  
  private twoTasks : String = "[ { id:\"0\", name:\"A\" },\n  { id:\"1\", name:\"B\" } ]";
  
  public given_twoTasks (  ) {
  this.contextProvider.SetDataTableJson ( this.twoTasks );
 }
  
  private priorityCombinations : String = "[ { id:\"0\", priority:\"low\" },\n  { id:\"1\", priority:\"medium\" },\n  { id:\"2\", priority:\"high\" } ]";
  
  public given_priorityCombinations (  ) {
  this.contextProvider.SetDataTableJson ( this.priorityCombinations );
 }
  
  private dueDate2023 : String = "[ { id:\"0\", name:\"Task A\", dueDate:\"2023/01/01\" } ]";
  
  public given_dueDate2023 (  ) {
  this.contextProvider.SetDataTableJson ( this.dueDate2023 );
 }
  
  private dueDate2024 : String = "[ { id:\"0\", name:\"Task A\", dueDate:\"2024/10/11\" } ]";
  
  public given_dueDate2024 (  ) {
  this.contextProvider.SetDataTableJson ( this.dueDate2024 );
 }
  
  // When Helper Definitions

  
  public when_LoadView (  ) {
  this.sut.loadView (  );
 }
  
  public when_click_AddNewTask (  ) {
  this.sut.addNewTaskClicked (  );
 }
  
  public when_LoadView_1 (  ) {
  this.sut.loadView (  );
 }
  
  public when_LoadView_2 (  ) {
  this.sut.loadView (  );
 }
  
  public when_LoadView_3 (  ) {
  this.sut.loadView (  );
 }
  
  public when_LoadView_4 (  ) {
  this.sut.loadView (  );
 }
  
  public when_LoadView_5 (  ) {
  this.sut.loadView (  );
 }
  
  public when_LoadView_6 (  ) {
  this.sut.loadView (  );
 }
  
  // Then Helper Definitions

  
  public then_Tasks_has_3_rows_and_selected_row_handle_2 (  ) {
  let actualRows: TaskListViewModelTasksRow [] = this.sut.getTasksWidgetTableRows (  );
   AssertEqual ( 3, actualRows->size (  ) );
   {
  let row0: TaskListViewModelTasksRow = actualRows[ 1 ];
   AssertEqual ( "0", row0.getRowHandle (  ) );
   AssertEqual ( "PrioLow", row0.getPriorityImageSource (  ) );
   AssertEqual ( "Exercise", row0.getTask_NameText (  ) );
   AssertEqual ( "2024/01/04", row0.getDue_DateText (  ) );
   AssertEqual ( "4th January 2024", row0.getDue_DateToolTip (  ) );
 }
   {
  let row1: TaskListViewModelTasksRow = actualRows[ 2 ];
   AssertEqual ( "1", row1.getRowHandle (  ) );
   AssertEqual ( "PrioHigh", row1.getPriorityImageSource (  ) );
   AssertEqual ( "Taxes", row1.getTask_NameText (  ) );
   AssertEqual ( "red", row1.getTask_NameTextColor (  ) );
   AssertEqual ( "2023/12/31", row1.getDue_DateText (  ) );
   AssertEqual ( "red", row1.getDue_DateTextColor (  ) );
   AssertEqual ( "31st December 2023", row1.getDue_DateToolTip (  ) );
 }
   {
  let row2: TaskListViewModelTasksRow = actualRows[ 3 ];
   AssertEqual ( "2", row2.getRowHandle (  ) );
   AssertEqual ( "PrioMedium", row2.getPriorityImageSource (  ) );
   AssertEqual ( "<New Task>", row2.getTask_NameText (  ) );
   AssertEqual ( "", row2.getDue_DateText (  ) );
 }
   AssertEqual ( "2", this.sut.getTasksSelectedRow (  ) );
 }
  
  public then_AddNewTask_is_enabled (  ) {
  AssertTrue ( this.sut.getIsAddNewTaskEnabled (  ) );
 }
  
  public then_DeleteTask_is_enabled (  ) {
  AssertTrue ( this.sut.getIsDeleteTaskEnabled (  ) );
 }
  
  public then_Tasks_has_0_rows (  ) {
  let actualRows: TaskListViewModelTasksRow [] = this.sut.getTasksWidgetTableRows (  );
   AssertEqual ( 0, actualRows->size (  ) );
 }
  
  public then_Tasks_has_1_rows (  ) {
  let actualRows: TaskListViewModelTasksRow [] = this.sut.getTasksWidgetTableRows (  );
   AssertEqual ( 1, actualRows->size (  ) );
   {
  let row0: TaskListViewModelTasksRow = actualRows[ 1 ];
   AssertEqual ( "0", row0.getRowHandle (  ) );
   AssertEqual ( "PrioLow", row0.getPriorityImageSource (  ) );
   AssertEqual ( "A", row0.getTask_NameText (  ) );
   AssertEqual ( "2024/12/01", row0.getDue_DateText (  ) );
 }
 }
  
  public then_Tasks_has_2_rows_and_selected_row_handle_0 (  ) {
  let actualRows: TaskListViewModelTasksRow [] = this.sut.getTasksWidgetTableRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: TaskListViewModelTasksRow = actualRows[ 1 ];
   AssertEqual ( "0", row0.getRowHandle (  ) );
   AssertEqual ( "A", row0.getTask_NameText (  ) );
 }
   {
  let row1: TaskListViewModelTasksRow = actualRows[ 2 ];
   AssertEqual ( "1", row1.getRowHandle (  ) );
   AssertEqual ( "B", row1.getTask_NameText (  ) );
 }
   AssertEqual ( "0", this.sut.getTasksSelectedRow (  ) );
 }
  
  public then_Tasks_has_3_rows (  ) {
  let actualRows: TaskListViewModelTasksRow [] = this.sut.getTasksWidgetTableRows (  );
   AssertEqual ( 3, actualRows->size (  ) );
   {
  let row0: TaskListViewModelTasksRow = actualRows[ 1 ];
   AssertEqual ( "0", row0.getRowHandle (  ) );
   AssertEqual ( "PrioLow", row0.getPriorityImageSource (  ) );
 }
   {
  let row1: TaskListViewModelTasksRow = actualRows[ 2 ];
   AssertEqual ( "1", row1.getRowHandle (  ) );
   AssertEqual ( "PrioMedium", row1.getPriorityImageSource (  ) );
 }
   {
  let row2: TaskListViewModelTasksRow = actualRows[ 3 ];
   AssertEqual ( "2", row2.getRowHandle (  ) );
   AssertEqual ( "PrioHigh", row2.getPriorityImageSource (  ) );
 }
 }
  
  public then_Tasks_has_1_rows_1 (  ) {
  let actualRows: TaskListViewModelTasksRow [] = this.sut.getTasksWidgetTableRows (  );
   AssertEqual ( 1, actualRows->size (  ) );
   {
  let row0: TaskListViewModelTasksRow = actualRows[ 1 ];
   AssertEqual ( "0", row0.getRowHandle (  ) );
   AssertEqual ( "Task A", row0.getTask_NameText (  ) );
   AssertEqual ( "red", row0.getTask_NameTextColor (  ) );
   AssertEqual ( "2023/01/01", row0.getDue_DateText (  ) );
   AssertEqual ( "red", row0.getDue_DateTextColor (  ) );
 }
 }
  
  public then_Tasks_has_1_rows_2 (  ) {
  let actualRows: TaskListViewModelTasksRow [] = this.sut.getTasksWidgetTableRows (  );
   AssertEqual ( 1, actualRows->size (  ) );
   {
  let row0: TaskListViewModelTasksRow = actualRows[ 1 ];
   AssertEqual ( "0", row0.getRowHandle (  ) );
   AssertEqual ( "2024/10/11", row0.getDue_DateText (  ) );
   AssertEqual ( "11th October 2024", row0.getDue_DateToolTip (  ) );
 }
 }
}
package de.vimotest.examples.taskview;

/*Generated by MPS */

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import java.util.List;
import org.junit.Assert;

public class TaskListViewModelTests_Test {
  private TaskListViewModel sut;
  private TaskListViewModelContextProvider contextProvider;
  private String oneTask = "[ {id:\"0\", name:\"A\", priority:low, dueDate:\"2024/12/01\"} ]";
  private String twoTasks = "[ {id:\"0\", name:\"A\" }, {id:\"1\", name:\"B\" } ]";
  private String oneTaskA = "[ {id:\"0\", name:\"A\" } ]";
  private String threeTasks = "[ {id:\"0\", name:\"A\"}, {id:\"1\", name:\"B\"}, {id:\"2\", name:\"C\"} ]";
  private String priorityCombinations = "[ {id:\"0\", priority:low}, {id:\"1\", priority:medium}, {id:\"2\", priority:high} ]";
  @Test
  public void test_Load_Empty_Tasks_given_when_LoadView_then_Tasks_has_0_rows() throws Exception {
    this.BuildSut();
    this.when_LoadView();
    this.then_Tasks_has_0_rows();
  }
  @Test
  public void test_Load_one_Task_with_all_values_given_oneTask_when_LoadView_then_Tasks_has_1_rows() throws Exception {
    this.given_oneTask();
    this.BuildSut();
    this.when_LoadView1();
    this.then_Tasks_has_1_rows();
  }
  @Test
  public void test_Initial_selection_given_twoTasks_when_LoadView_then_Tasks_has_2_rows_and_selected_row_handle_0() throws Exception {
    this.given_twoTasks();
    this.BuildSut();
    this.when_LoadView2();
    this.then_Tasks_has_2_rows_and_selected_row_handle_0();
  }
  @Test
  public void test_Add_New_Task_given_oneTaskA_when_LoadView_and_click_AddNewTask_then_Tasks_has_2_rows_and_selected_row_handle_1() throws Exception {
    this.given_oneTaskA();
    this.BuildSut();
    this.when_LoadView3();
    this.when_click_AddNewTask();
    this.then_Tasks_has_2_rows_and_selected_row_handle_1();
  }
  @Test
  public void test_Delete_Task_given_threeTasks_when_LoadView_and_select_row_0_in_Tasks_and_click_DeleteTask_then_Tasks_has_2_rows_and_selected_row_handle_1() throws Exception {
    this.given_threeTasks();
    this.BuildSut();
    this.when_LoadView4();
    this.when_select_row_0_in_Tasks();
    this.when_click_DeleteTask();
    this.then_Tasks_has_2_rows_and_selected_row_handle_11();
  }
  @Test
  public void test_Delete_Task_given_threeTasks_when_LoadView_and_select_row_1_in_Tasks_and_click_DeleteTask_then_Tasks_has_2_rows_and_selected_row_handle_2() throws Exception {
    this.given_threeTasks();
    this.BuildSut();
    this.when_LoadView5();
    this.when_select_row_1_in_Tasks();
    this.when_click_DeleteTask1();
    this.then_Tasks_has_2_rows_and_selected_row_handle_2();
  }
  @Test
  public void test_Delete_Task_given_threeTasks_when_LoadView_and_select_row_2_in_Tasks_and_click_DeleteTask_then_Tasks_has_2_rows_and_selected_row_handle_1() throws Exception {
    this.given_threeTasks();
    this.BuildSut();
    this.when_LoadView6();
    this.when_select_row_2_in_Tasks();
    this.when_click_DeleteTask2();
    this.then_Tasks_has_2_rows_and_selected_row_handle_12();
  }
  @Test
  public void test_Delete_Task_given_threeTasks_when_LoadView_and_click_DeleteTask_and_click_DeleteTask_and_click_DeleteTask_then_Tasks_has_0_rows() throws Exception {
    this.given_threeTasks();
    this.BuildSut();
    this.when_LoadView7();
    this.when_click_DeleteTask3();
    this.when_click_DeleteTask4();
    this.when_click_DeleteTask5();
    this.then_Tasks_has_0_rows1();
  }
  @Test
  public void test_Load_Tasks_with_all_three_priority_levels_given_priorityCombinations_when_LoadView_then_Tasks_has_3_rows() throws Exception {
    this.given_priorityCombinations();
    this.BuildSut();
    this.when_LoadView8();
    this.then_Tasks_has_3_rows();
  }
  @BeforeEach
  public void setUp() {
    this.contextProvider = new TaskListViewModelContextProvider();
    this.contextProvider.Init();
  }



  protected void BuildSut() {
    this.sut = this.contextProvider.BuildSut();
  }



  public void given_oneTask() {
    this.contextProvider.SetSimpleStringContext(this.oneTask);
  }
  public void given_twoTasks() {
    this.contextProvider.SetSimpleStringContext(this.twoTasks);
  }
  public void given_oneTaskA() {
    this.contextProvider.SetSimpleStringContext(this.oneTaskA);
  }
  public void given_threeTasks() {
    this.contextProvider.SetSimpleStringContext(this.threeTasks);
  }
  public void given_priorityCombinations() {
    this.contextProvider.SetSimpleStringContext(this.priorityCombinations);
  }


  public void when_LoadView() {
    this.sut.LoadView();
  }
  public void when_LoadView1() {
    this.sut.LoadView();
  }
  public void when_LoadView2() {
    this.sut.LoadView();
  }
  public void when_LoadView3() {
    this.sut.LoadView();
  }
  public void when_click_AddNewTask() {
    this.sut.AddNewTaskClicked();
  }
  public void when_LoadView4() {
    this.sut.LoadView();
  }
  public void when_select_row_0_in_Tasks() {
    this.sut.TasksRowSelected("0");
  }
  public void when_click_DeleteTask() {
    this.sut.DeleteTaskClicked();
  }
  public void when_LoadView5() {
    this.sut.LoadView();
  }
  public void when_select_row_1_in_Tasks() {
    this.sut.TasksRowSelected("1");
  }
  public void when_click_DeleteTask1() {
    this.sut.DeleteTaskClicked();
  }
  public void when_LoadView6() {
    this.sut.LoadView();
  }
  public void when_select_row_2_in_Tasks() {
    this.sut.TasksRowSelected("2");
  }
  public void when_click_DeleteTask2() {
    this.sut.DeleteTaskClicked();
  }
  public void when_LoadView7() {
    this.sut.LoadView();
  }
  public void when_click_DeleteTask3() {
    this.sut.DeleteTaskClicked();
  }
  public void when_click_DeleteTask4() {
    this.sut.DeleteTaskClicked();
  }
  public void when_click_DeleteTask5() {
    this.sut.DeleteTaskClicked();
  }
  public void when_LoadView8() {
    this.sut.LoadView();
  }


  public void then_Tasks_has_0_rows() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(0, actualRows.size());
  }
  public void then_Tasks_has_1_rows() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(1, actualRows.size());
    // {
    TaskListViewModelTasksRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("0", row0.getRowHandle());
    Assert.assertEquals("PrioLow", row0.getPriorityImageSource());
    Assert.assertEquals("A", row0.getTask_NameText());
    Assert.assertEquals("2024/12/01", row0.getDue_DateText());
    // }
  }
  public void then_Tasks_has_2_rows_and_selected_row_handle_0() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    TaskListViewModelTasksRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("0", row0.getRowHandle());
    Assert.assertEquals("A", row0.getTask_NameText());
    // }
    // {
    TaskListViewModelTasksRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals("1", row1.getRowHandle());
    Assert.assertEquals("B", row1.getTask_NameText());
    // }
    Assert.assertEquals("0", this.sut.getTasksSelectedRow());
  }
  public void then_Tasks_has_2_rows_and_selected_row_handle_1() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    TaskListViewModelTasksRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("0", row0.getRowHandle());
    Assert.assertEquals("A", row0.getTask_NameText());
    // }
    // {
    TaskListViewModelTasksRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals("1", row1.getRowHandle());
    Assert.assertEquals("PrioMedium", row1.getPriorityImageSource());
    Assert.assertEquals("<New Task>", row1.getTask_NameText());
    Assert.assertEquals("", row1.getDue_DateText());
    // }
    Assert.assertEquals("1", this.sut.getTasksSelectedRow());
  }
  public void then_Tasks_has_2_rows_and_selected_row_handle_11() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    TaskListViewModelTasksRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("1", row0.getRowHandle());
    Assert.assertEquals("B", row0.getTask_NameText());
    // }
    // {
    TaskListViewModelTasksRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals("2", row1.getRowHandle());
    Assert.assertEquals("C", row1.getTask_NameText());
    // }
    Assert.assertEquals("1", this.sut.getTasksSelectedRow());
  }
  public void then_Tasks_has_2_rows_and_selected_row_handle_2() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    TaskListViewModelTasksRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("0", row0.getRowHandle());
    Assert.assertEquals("A", row0.getTask_NameText());
    // }
    // {
    TaskListViewModelTasksRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals("2", row1.getRowHandle());
    Assert.assertEquals("C", row1.getTask_NameText());
    // }
    Assert.assertEquals("2", this.sut.getTasksSelectedRow());
  }
  public void then_Tasks_has_2_rows_and_selected_row_handle_12() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    TaskListViewModelTasksRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("0", row0.getRowHandle());
    Assert.assertEquals("A", row0.getTask_NameText());
    // }
    // {
    TaskListViewModelTasksRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals("1", row1.getRowHandle());
    Assert.assertEquals("B", row1.getTask_NameText());
    // }
    Assert.assertEquals("1", this.sut.getTasksSelectedRow());
  }
  public void then_Tasks_has_0_rows1() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(0, actualRows.size());
  }
  public void then_Tasks_has_3_rows() {
    List<TaskListViewModelTasksRow> actualRows = this.sut.getTasksWidgetTableRows();
    Assert.assertEquals(3, actualRows.size());
    // {
    TaskListViewModelTasksRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("0", row0.getRowHandle());
    Assert.assertEquals("PrioLow", row0.getPriorityImageSource());
    // }
    // {
    TaskListViewModelTasksRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals("1", row1.getRowHandle());
    Assert.assertEquals("PrioMedium", row1.getPriorityImageSource());
    // }
    // {
    TaskListViewModelTasksRow row2 = actualRows.get(3 - 1);
    Assert.assertEquals("2", row2.getRowHandle());
    Assert.assertEquals("PrioHigh", row2.getPriorityImageSource());
    // }
  }
}

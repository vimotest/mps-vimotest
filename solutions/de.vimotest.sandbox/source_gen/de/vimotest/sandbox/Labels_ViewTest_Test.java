package de.vimotest.sandbox;

/*Generated by MPS */

import de.vimotest.sandbox.widgetassertions.Labels_View;
import de.vimotest.sandbox.widgetassertions.Labels_ViewContextProvider;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import de.vimotest.sandbox.widgetassertions.Labels_ViewContextProviderImpl;
import org.junit.Assert;
import java.util.List;

public class Labels_ViewTest_Test {
  private Labels_View sut;
  private Labels_ViewContextProvider contextProvider;
  @Test
  public void test_Single_Line_Label_given_empty_context_when_then_Test_shows_text_My_Expectation_Text_and_is_enabled_and_is_visible() throws Exception {
    this.given_empty_context();
    this.BuildSut();
    this.then_Test_shows_text_My_Expectation_Text_and_is_enabled_and_is_visible();
  }
  @Test
  public void test_Multi_Line_Label_given_empty_context_when_then_MultiLine_shows_text_Expected_Line_1_Expected_Line_2_() throws Exception {
    this.given_empty_context_1();
    this.BuildSut();
    this.then_MultiLine_shows_text_Expected_Line_1_Expected_Line_2_();
  }
  @Test
  public void test_ToolTip_Label_given_empty_context_when_then_WithToolTip_shows_text_Info_and_shows_tooltip_My_Expected_Tooltip_() throws Exception {
    this.given_empty_context_2();
    this.BuildSut();
    this.then_WithToolTip_shows_text_Info_and_shows_tooltip_My_Expected_Tooltip_();
  }
  @Test
  public void test_MultiLine_ToolTip_Label_given_empty_context_when_then_WithMultiLineToolTip_shows_text_Info_and_shows_tooltip_Line1_Line2_() throws Exception {
    this.given_empty_context_3();
    this.BuildSut();
    this.then_WithMultiLineToolTip_shows_text_Info_and_shows_tooltip_Line1_Line2_();
  }
  @Test
  public void test_TextColor_Label_given_when_then_WithTextColor_shows_text_Info_and_has_text_color_blue_() throws Exception {
    this.BuildSut();
    this.then_WithTextColor_shows_text_Info_and_has_text_color_blue_();
  }
  @BeforeEach
  public void setUp() {
    this.contextProvider = new Labels_ViewContextProviderImpl();
    this.contextProvider.Init();
  }



  protected void BuildSut() {
    this.sut = this.contextProvider.BuildSut();
  }



  public void given_empty_context() {
  }
  public void given_empty_context_1() {
  }
  public void given_empty_context_2() {
  }
  public void given_empty_context_3() {
  }




  public void then_Test_shows_text_My_Expectation_Text_and_is_enabled_and_is_visible() {
    Assert.assertEquals("My Expectation Text", this.sut.getTestLabelText());
    Assert.assertTrue(this.sut.getIsTestLabelEnabled());
    Assert.assertTrue(this.sut.getIsTestLabelVisibility());
  }
  public void then_MultiLine_shows_text_Expected_Line_1_Expected_Line_2_() {
    List<String> actualMultiLineLines = this.sut.getMultiLineLabelText();
    Assert.assertEquals(2, actualMultiLineLines.size());
    Assert.assertEquals("Expected Line 1", actualMultiLineLines.get(1 - 1));
    Assert.assertEquals("Expected Line 2", actualMultiLineLines.get(2 - 1));
  }
  public void then_WithToolTip_shows_text_Info_and_shows_tooltip_My_Expected_Tooltip_() {
    Assert.assertEquals("Info", this.sut.getWithToolTipLabelText());
    Assert.assertEquals("My Expected Tooltip", this.sut.getWithToolTipLabelToolTip());
  }
  public void then_WithMultiLineToolTip_shows_text_Info_and_shows_tooltip_Line1_Line2_() {
    Assert.assertEquals("Info", this.sut.getWithMultiLineToolTipLabelText());
    List<String> actualWithMultiLineToolTipLines = this.sut.getWithMultiLineToolTipLabelToolTip();
    Assert.assertEquals(2, actualWithMultiLineToolTipLines.size());
    Assert.assertEquals("Line1", actualWithMultiLineToolTipLines.get(1 - 1));
    Assert.assertEquals("Line2", actualWithMultiLineToolTipLines.get(2 - 1));
  }
  public void then_WithTextColor_shows_text_Info_and_has_text_color_blue_() {
    Assert.assertEquals("Info", this.sut.getWithTextColorLabelText());
    Assert.assertEquals("blue", this.sut.getWithTextColorLabelTextColor());
  }
}

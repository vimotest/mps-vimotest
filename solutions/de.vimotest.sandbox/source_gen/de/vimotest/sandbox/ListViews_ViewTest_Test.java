package de.vimotest.sandbox;

/*Generated by MPS */

import de.vimotest.sandbox.widgetassertions.ListViews_View;
import de.vimotest.sandbox.widgetassertions.ListViews_ViewContextProvider;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import de.vimotest.sandbox.widgetassertions.ListViews_ViewContextProviderImpl;
import java.util.List;
import de.vimotest.sandbox.widgetassertions.ListViews_ViewMyListOfLabelRow;
import org.junit.Assert;
import de.vimotest.sandbox.widgetassertions.ListViews_ViewMyListOfImagesRow;
import de.vimotest.sandbox.widgetassertions.ListViews_ViewMyCheckboxesRow;
import de.vimotest.sandbox.widgetassertions.ListViews_ViewMyStringRowHandlesRow;
import de.vimotest.sandbox.widgetassertions.ListViews_ViewMyMultiRowSelectionListRow;

public class ListViews_ViewTest_Test {
  private ListViews_View sut;
  private ListViews_ViewContextProvider contextProvider;
  @Test
  public void test_My_Scenario_given_empty_context_when_then_MyListOfLabel_has_4_rows_and_selected_row_index_3_and_MyListOfImages_has_2_rows_and_MyCheckboxes_has_3_rows_and_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1_and_MyMultiRowSelectionList_has_3_rows_and_selected_row_indices_0_2_() throws Exception {
    this.given_empty_context();
    this.BuildSut();
    this.then_MyListOfLabel_has_4_rows_and_selected_row_index_3();
    this.then_MyListOfImages_has_2_rows();
    this.then_MyCheckboxes_has_3_rows();
    this.then_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1();
    this.then_MyMultiRowSelectionList_has_3_rows_and_selected_row_indices_0_2_();
  }
  @Test
  public void test_List_Ignore_Column_given_empty_context_when_then_MyListOfLabel_has_4_rows() throws Exception {
    this.given_empty_context1();
    this.BuildSut();
    this.then_MyListOfLabel_has_4_rows();
  }
  @Test
  public void test_List_Ignore_Cell_given_empty_context_when_then_MyListOfLabel_has_4_rows() throws Exception {
    this.given_empty_context2();
    this.BuildSut();
    this.then_MyListOfLabel_has_4_rows1();
  }
  @BeforeEach
  public void setUp() {
    this.contextProvider = new ListViews_ViewContextProviderImpl();
    this.contextProvider.Init();
  }



  protected void BuildSut() {
    this.sut = this.contextProvider.BuildSut();
  }



  public void given_empty_context() {
  }
  public void given_empty_context1() {
  }
  public void given_empty_context2() {
  }




  public void then_MyListOfLabel_has_4_rows_and_selected_row_index_3() {
    List<ListViews_ViewMyListOfLabelRow> actualRows = this.sut.getMyListOfLabelWidgetListRows();
    Assert.assertEquals(4, actualRows.size());
    // {
    ListViews_ViewMyListOfLabelRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    Assert.assertEquals("A", row0.getMy_TextText());
    Assert.assertFalse(row0.getIsMy_TextVisibility());
    Assert.assertTrue(row0.getIsMy_TextEnabled());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertEquals("B", row1.getMy_TextText());
    Assert.assertFalse(row1.getIsMy_TextEnabled());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row2 = actualRows.get(3 - 1);
    Assert.assertEquals(Integer.valueOf(row2.getRowIndex()), row2.getRowIndex());
    Assert.assertEquals("C", row2.getMy_TextText());
    Assert.assertTrue(row2.getIsMy_TextEnabled());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row3 = actualRows.get(4 - 1);
    Assert.assertEquals(Integer.valueOf(row3.getRowIndex()), row3.getRowIndex());
    Assert.assertEquals("D", row3.getMy_TextText());
    Assert.assertTrue(row3.getIsMy_TextVisibility());
    // }
    Assert.assertEquals(Integer.valueOf(this.sut.getMyListOfLabelSelectedRow()), this.sut.getMyListOfLabelSelectedRow());
  }
  public void then_MyListOfImages_has_2_rows() {
    List<ListViews_ViewMyListOfImagesRow> actualRows = this.sut.getMyListOfImagesWidgetListRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    ListViews_ViewMyListOfImagesRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    Assert.assertEquals("image_star", row0.getMy_ImageImageSource());
    // }
    // {
    ListViews_ViewMyListOfImagesRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertEquals("image_circle", row1.getMy_ImageImageSource());
    // }
  }
  public void then_MyCheckboxes_has_3_rows() {
    List<ListViews_ViewMyCheckboxesRow> actualRows = this.sut.getMyCheckboxesWidgetListRows();
    Assert.assertEquals(3, actualRows.size());
    // {
    ListViews_ViewMyCheckboxesRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    Assert.assertTrue(row0.getIsHeaderChecked());
    // }
    // {
    ListViews_ViewMyCheckboxesRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertFalse(row1.getIsHeaderChecked());
    // }
    // {
    ListViews_ViewMyCheckboxesRow row2 = actualRows.get(3 - 1);
    Assert.assertEquals(Integer.valueOf(row2.getRowIndex()), row2.getRowIndex());
    Assert.assertTrue(row2.getIsHeaderChecked());
    Assert.assertEquals("My Label", row2.getHeaderText());
    // }
  }
  public void then_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1() {
    List<ListViews_ViewMyStringRowHandlesRow> actualRows = this.sut.getMyStringRowHandlesWidgetListRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    ListViews_ViewMyStringRowHandlesRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("ROW0", row0.getRowHandle());
    Assert.assertEquals("A", row0.getValuesText());
    // }
    // {
    ListViews_ViewMyStringRowHandlesRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals("ROW1", row1.getRowHandle());
    Assert.assertEquals("B", row1.getValuesText());
    // }
    Assert.assertEquals("ROW1", this.sut.getMyStringRowHandlesSelectedRow());
  }
  public void then_MyMultiRowSelectionList_has_3_rows_and_selected_row_indices_0_2_() {
    List<ListViews_ViewMyMultiRowSelectionListRow> actualRows = this.sut.getMyMultiRowSelectionListWidgetListRows();
    Assert.assertEquals(3, actualRows.size());
    // {
    ListViews_ViewMyMultiRowSelectionListRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    Assert.assertEquals("A", row0.getHeaderText());
    // }
    // {
    ListViews_ViewMyMultiRowSelectionListRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertEquals("B", row1.getHeaderText());
    // }
    // {
    ListViews_ViewMyMultiRowSelectionListRow row2 = actualRows.get(3 - 1);
    Assert.assertEquals(Integer.valueOf(row2.getRowIndex()), row2.getRowIndex());
    Assert.assertEquals("C", row2.getHeaderText());
    // }
    List<Integer> actualMyMultiRowSelectionListSelectedRowHandles = this.sut.getMyMultiRowSelectionListSelectedRows();
    Assert.assertEquals(2, actualMyMultiRowSelectionListSelectedRowHandles.size());
    Assert.assertEquals(Integer.valueOf(actualMyMultiRowSelectionListSelectedRowHandles.get(1 - 1)), actualMyMultiRowSelectionListSelectedRowHandles.get(1 - 1));
    Assert.assertEquals(Integer.valueOf(actualMyMultiRowSelectionListSelectedRowHandles.get(2 - 1)), actualMyMultiRowSelectionListSelectedRowHandles.get(2 - 1));
  }
  public void then_MyListOfLabel_has_4_rows() {
    List<ListViews_ViewMyListOfLabelRow> actualRows = this.sut.getMyListOfLabelWidgetListRows();
    Assert.assertEquals(4, actualRows.size());
    // {
    ListViews_ViewMyListOfLabelRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row2 = actualRows.get(3 - 1);
    Assert.assertEquals(Integer.valueOf(row2.getRowIndex()), row2.getRowIndex());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row3 = actualRows.get(4 - 1);
    Assert.assertEquals(Integer.valueOf(row3.getRowIndex()), row3.getRowIndex());
    // }
  }
  public void then_MyListOfLabel_has_4_rows1() {
    List<ListViews_ViewMyListOfLabelRow> actualRows = this.sut.getMyListOfLabelWidgetListRows();
    Assert.assertEquals(4, actualRows.size());
    // {
    ListViews_ViewMyListOfLabelRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertEquals("B", row1.getMy_TextText());
    Assert.assertFalse(row1.getIsMy_TextEnabled());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row2 = actualRows.get(3 - 1);
    Assert.assertEquals(Integer.valueOf(row2.getRowIndex()), row2.getRowIndex());
    // }
    // {
    ListViews_ViewMyListOfLabelRow row3 = actualRows.get(4 - 1);
    Assert.assertEquals(Integer.valueOf(row3.getRowIndex()), row3.getRowIndex());
    Assert.assertEquals("D", row3.getMy_TextText());
    Assert.assertTrue(row3.getIsMy_TextVisibility());
    // }
  }
}

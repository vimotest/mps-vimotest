package de.vimotest.sandbox;

/*Generated by MPS */

import de.vimotest.sandbox.widgetassertions.LowLevelFields_View;
import de.vimotest.sandbox.widgetassertions.LowLevelFields_ViewContextProvider;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import de.vimotest.sandbox.widgetassertions.LowLevelFields_ViewContextProviderImpl;
import org.junit.Assert;
import java.util.List;
import de.vimotest.sandbox.widgetassertions.LowLevelFields_ViewCustomListRowFieldRow;
import de.vimotest.sandbox.widgetassertions.LowLevelFields_ViewCustomTableRowFieldRow;
import de.vimotest.sandbox.widgetassertions.LowLevelFields_ViewCustomTreeRowFieldRow;

public class LowLevelFields_ViewTests_Test {
  private LowLevelFields_View sut;
  private LowLevelFields_ViewContextProvider contextProvider;
  @Test
  public void test_Primitive_Field_Asserts_given_when_then_MyBool_is_true_and_MyInt_is_42_and_MyString_is_text_() throws Exception {
    this.BuildSut();
    this.then_MyBool_is_true();
    this.then_MyInt_is_42();
    this.then_MyString_is_text_();
  }
  @Test
  public void test_Primitive_List_Field_Asserts_given_when_then_MyStrings_is_new_String____A___B__() throws Exception {
    this.BuildSut();
    this.then_MyStrings_is_new_String____A___B__();
  }
  @Test
  public void test_Rowbased_Primitive_Fields_given_when_then_CustomListRowField_has_1_rows_and_CustomTableRowField_has_1_rows_and_CustomTreeRowField_has_1_rows() throws Exception {
    this.BuildSut();
    this.then_CustomListRowField_has_1_rows();
    this.then_CustomTableRowField_has_1_rows();
    this.then_CustomTreeRowField_has_1_rows();
  }
  @BeforeEach
  public void setUp() {
    this.contextProvider = new LowLevelFields_ViewContextProviderImpl();
    this.contextProvider.Init();
  }



  protected void BuildSut() {
    this.sut = this.contextProvider.BuildSut();
  }







  public void then_MyBool_is_true() {
    Assert.assertTrue(this.sut.getMyBool());
  }
  public void then_MyInt_is_42() {
    Assert.assertEquals(Integer.valueOf(this.sut.getMyInt()), this.sut.getMyInt());
  }
  public void then_MyString_is_text_() {
    Assert.assertEquals("text", this.sut.getMyString());
  }
  public void then_MyStrings_is_new_String____A___B__() {
    List<String> actualMyStrings = this.sut.getMyStrings();
    Assert.assertEquals("A", actualMyStrings.get(1 - 1));
    Assert.assertEquals("B", actualMyStrings.get(2 - 1));
  }
  public void then_CustomListRowField_has_1_rows() {
    List<LowLevelFields_ViewCustomListRowFieldRow> actualRows = this.sut.getCustomListRowFieldListRows();
    Assert.assertEquals(1, actualRows.size());
    // {
    LowLevelFields_ViewCustomListRowFieldRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("0", row0.getRowHandle());
    Assert.assertEquals("", row0.getHeaderLabelText());
    List<String> actualAdditionalStrings = row0.getAdditionalStrings();
    Assert.assertEquals("A", actualAdditionalStrings.get(1 - 1));
    // }
  }
  public void then_CustomTableRowField_has_1_rows() {
    List<LowLevelFields_ViewCustomTableRowFieldRow> actualRows = this.sut.getCustomTableRowFieldTableRows();
    Assert.assertEquals(1, actualRows.size());
    // {
    LowLevelFields_ViewCustomTableRowFieldRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("0", row0.getRowHandle());
    Assert.assertEquals("", row0.getHeaderLabelText());
    Assert.assertFalse(row0.getAdditionalBool());
    // }
  }
  public void then_CustomTreeRowField_has_1_rows() {
    List<LowLevelFields_ViewCustomTreeRowFieldRow> actualRows = this.sut.getCustomTreeRowFieldTreeRows();
    Assert.assertEquals(1, actualRows.size());
    // {
    LowLevelFields_ViewCustomTreeRowFieldRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("9", row0.getRowHandle());
    Assert.assertEquals(Integer.valueOf(row0.getRowDepth()), row0.getRowDepth());
    Assert.assertEquals("", row0.getHeaderLabelText());
    Assert.assertEquals(Integer.valueOf(row0.getAdditionalInt()), row0.getAdditionalInt());
    // }
  }
}

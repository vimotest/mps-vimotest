package de.vimotest.sandbox;

/*Generated by MPS */

import de.vimotest.sandbox.commands.RowBasedCommand_View;
import de.vimotest.sandbox.commands.RowBasedCommand_ViewContextProvider;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import java.util.List;
import de.vimotest.sandbox.commands.RowBasedCommand_ViewMyListViewRow;
import org.junit.Assert;
import de.vimotest.sandbox.commands.RowBasedCommand_ViewMyTableViewRow;
import de.vimotest.sandbox.commands.RowBasedCommand_ViewMyTreeViewRow;

public class RowBasedCommand_ViewTests_Test {
  private RowBasedCommand_View sut;
  private RowBasedCommand_ViewContextProvider contextProvider;
  @Test
  public void test_ListView_RowBased_Commands_given_when_check_Checkboxes_at_0_and_uncheck_Checkboxes_at_1_then_MyListView_has_2_rows() throws Exception {
    this.BuildSut();
    this.when_check_Checkboxes_at_0();
    this.when_uncheck_Checkboxes_at_1();
    this.then_MyListView_has_2_rows();
  }
  @Test
  public void test_TableView_RowBased_Commands_given_when_select_entry_MyText1_in_FreeTextComboBoxes_at_0_and_select_entry_MyText2_in_FreeTextComboBoxes_at_1_and_select_entry_B_in_EntryComboBoxes_at_0_and_select_entry_D_in_EntryComboBoxes_at_1_then_MyTableView_has_2_rows() throws Exception {
    this.BuildSut();
    this.when_select_entry_MyText1_in_FreeTextComboBoxes_at_0();
    this.when_select_entry_MyText2_in_FreeTextComboBoxes_at_1();
    this.when_select_entry_B_in_EntryComboBoxes_at_0();
    this.when_select_entry_D_in_EntryComboBoxes_at_1();
    this.then_MyTableView_has_2_rows();
  }
  @Test
  public void test_TreeView_RowBased_Commands_given_when_fill_A_in_TextBoxes_at_0_and_fill_B_in_TextBoxes_at_1_and_click_Buttons_at_0_then_MyTreeView_has_2_rows() throws Exception {
    this.BuildSut();
    this.when_fill_A_in_TextBoxes_at_0();
    this.when_fill_B_in_TextBoxes_at_1();
    this.when_click_Buttons_at_0();
    this.then_MyTreeView_has_2_rows();
  }
  @BeforeEach
  public void setUp() {
    this.contextProvider = new RowBasedCommand_ViewContextProvider();
    this.contextProvider.Init();
  }



  protected void BuildSut() {
    this.sut = this.contextProvider.BuildSut();
  }





  public void when_check_Checkboxes_at_0() {
    this.sut.CheckboxesChecked(0, true);
  }
  public void when_uncheck_Checkboxes_at_1() {
    this.sut.CheckboxesChecked(1, false);
  }
  public void when_select_entry_MyText1_in_FreeTextComboBoxes_at_0() {
    this.sut.FreeTextComboBoxesEntrySelected(0, "MyText1");
  }
  public void when_select_entry_MyText2_in_FreeTextComboBoxes_at_1() {
    this.sut.FreeTextComboBoxesEntrySelected(1, "MyText2");
  }
  public void when_select_entry_B_in_EntryComboBoxes_at_0() {
    this.sut.EntryComboBoxesEntrySelected(0, "B");
  }
  public void when_select_entry_D_in_EntryComboBoxes_at_1() {
    this.sut.EntryComboBoxesEntrySelected(1, "D");
  }
  public void when_fill_A_in_TextBoxes_at_0() {
    this.sut.TextBoxesTextFilled(0, "A");
  }
  public void when_fill_B_in_TextBoxes_at_1() {
    this.sut.TextBoxesTextFilled(1, "B");
  }
  public void when_click_Buttons_at_0() {
    this.sut.ButtonsClicked(0);
  }


  public void then_MyListView_has_2_rows() {
    List<RowBasedCommand_ViewMyListViewRow> actualRows = this.sut.getMyListViewWidgetListRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    RowBasedCommand_ViewMyListViewRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    Assert.assertTrue(row0.getIsCheckboxesChecked());
    // }
    // {
    RowBasedCommand_ViewMyListViewRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertFalse(row1.getIsCheckboxesChecked());
    // }
  }
  public void then_MyTableView_has_2_rows() {
    List<RowBasedCommand_ViewMyTableViewRow> actualRows = this.sut.getMyTableViewWidgetTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    RowBasedCommand_ViewMyTableViewRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    List<String> actualRow0FreeTextComboBoxesEntries = row0.getFreeTextComboBoxesComboBoxEntries();
    Assert.assertEquals(0, actualRow0FreeTextComboBoxesEntries.size());
    Assert.assertEquals(null, row0.getFreeTextComboBoxesSelectedEntry());
    Assert.assertEquals("MyText1", row0.getFreeTextComboBoxesText());
    List<String> actualRow0EntryComboBoxesEntries = row0.getEntryComboBoxesComboBoxEntries();
    Assert.assertEquals(3, actualRow0EntryComboBoxesEntries.size());
    Assert.assertEquals("A", actualRow0EntryComboBoxesEntries.get(1 - 1));
    Assert.assertEquals("B", actualRow0EntryComboBoxesEntries.get(2 - 1));
    Assert.assertEquals("C", actualRow0EntryComboBoxesEntries.get(3 - 1));
    Assert.assertEquals(null, row0.getEntryComboBoxesSelectedEntry());
    // }
    // {
    RowBasedCommand_ViewMyTableViewRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    List<String> actualRow1FreeTextComboBoxesEntries = row1.getFreeTextComboBoxesComboBoxEntries();
    Assert.assertEquals(0, actualRow1FreeTextComboBoxesEntries.size());
    Assert.assertEquals(null, row1.getFreeTextComboBoxesSelectedEntry());
    Assert.assertEquals("MyText2", row1.getFreeTextComboBoxesText());
    List<String> actualRow1EntryComboBoxesEntries = row1.getEntryComboBoxesComboBoxEntries();
    Assert.assertEquals(3, actualRow1EntryComboBoxesEntries.size());
    Assert.assertEquals("D", actualRow1EntryComboBoxesEntries.get(1 - 1));
    Assert.assertEquals("E", actualRow1EntryComboBoxesEntries.get(2 - 1));
    Assert.assertEquals("F", actualRow1EntryComboBoxesEntries.get(3 - 1));
    Assert.assertEquals(null, row1.getEntryComboBoxesSelectedEntry());
    // }
  }
  public void then_MyTreeView_has_2_rows() {
    List<RowBasedCommand_ViewMyTreeViewRow> actualRows = this.sut.getMyTreeViewWidgetTreeRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    RowBasedCommand_ViewMyTreeViewRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    Assert.assertEquals(Integer.valueOf(row0.getRowDepth()), row0.getRowDepth());
    Assert.assertEquals("A", row0.getTextBoxesText());
    // }
    // {
    RowBasedCommand_ViewMyTreeViewRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertEquals(Integer.valueOf(row1.getRowDepth()), row1.getRowDepth());
    Assert.assertEquals("B", row1.getTextBoxesText());
    // }
  }
}

package de.vimotest.sandbox;

/*Generated by MPS */

import de.vimotest.sandbox.widgetassertions.TableViews_View;
import de.vimotest.sandbox.widgetassertions.TableViews_ViewContextProvider;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import de.vimotest.sandbox.widgetassertions.TableViews_ViewContextProviderImpl;
import java.util.List;
import de.vimotest.sandbox.widgetassertions.TableViews_ViewMyElementsRow;
import org.junit.Assert;
import de.vimotest.sandbox.widgetassertions.TableViews_ViewMyStringRowHandlesRow;

public class TableViews_ViewTest_Test {
  private TableViews_View sut;
  private TableViews_ViewContextProvider contextProvider;
  @Test
  public void test_My_Scenario_given_empty_context_when_then_MyElements_has_2_rows_and_selected_row_index_1_and_is_visible_and_is_enabled_and_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1() throws Exception {
    this.given_empty_context();
    this.BuildSut();
    this.then_MyElements_has_2_rows_and_selected_row_index_1_and_is_visible_and_is_enabled();
    this.then_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1();
  }
  @Test
  public void test_Table_Ignore_Columns_given_empty_context_when_then_MyElements_has_2_rows() throws Exception {
    this.given_empty_context_1();
    this.BuildSut();
    this.then_MyElements_has_2_rows();
  }
  @BeforeEach
  public void setUp() {
    this.contextProvider = new TableViews_ViewContextProviderImpl();
    this.contextProvider.Init();
  }



  protected void BuildSut() {
    this.sut = this.contextProvider.BuildSut();
  }



  public void given_empty_context() {
  }
  public void given_empty_context_1() {
  }




  public void then_MyElements_has_2_rows_and_selected_row_index_1_and_is_visible_and_is_enabled() {
    List<TableViews_ViewMyElementsRow> actualRows = this.sut.getMyElementsTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    TableViews_ViewMyElementsRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    Assert.assertTrue(row0.getIsIncludeCheckBoxChecked());
    Assert.assertEquals("A", row0.getNameLabelText());
    Assert.assertEquals("B", row0.getDescriptionLabelText());
    Assert.assertEquals("image_info", row0.getInfoIconImageName());
    // }
    // {
    TableViews_ViewMyElementsRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertFalse(row1.getIsIncludeCheckBoxChecked());
    Assert.assertEquals("C", row1.getNameLabelText());
    Assert.assertEquals("D", row1.getDescriptionLabelText());
    Assert.assertEquals("image_star", row1.getInfoIconImageName());
    // }
    Assert.assertEquals(Integer.valueOf(this.sut.getMyElementsTableSelectedRow()), this.sut.getMyElementsTableSelectedRow());
    Assert.assertTrue(this.sut.getIsMyElementsTableVisible());
    Assert.assertTrue(this.sut.getIsMyElementsTableEnabled());
  }
  public void then_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1() {
    List<TableViews_ViewMyStringRowHandlesRow> actualRows = this.sut.getMyStringRowHandlesTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    TableViews_ViewMyStringRowHandlesRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals("ROW0", row0.getRowHandle());
    Assert.assertEquals("A", row0.getValuesLabelText());
    // }
    // {
    TableViews_ViewMyStringRowHandlesRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals("ROW1", row1.getRowHandle());
    Assert.assertEquals("B", row1.getValuesLabelText());
    // }
    Assert.assertEquals("ROW1", this.sut.getMyStringRowHandlesTableSelectedRow());
  }
  public void then_MyElements_has_2_rows() {
    List<TableViews_ViewMyElementsRow> actualRows = this.sut.getMyElementsTableRows();
    Assert.assertEquals(2, actualRows.size());
    // {
    TableViews_ViewMyElementsRow row0 = actualRows.get(1 - 1);
    Assert.assertEquals(Integer.valueOf(row0.getRowIndex()), row0.getRowIndex());
    Assert.assertEquals("A", row0.getNameLabelText());
    // }
    // {
    TableViews_ViewMyElementsRow row1 = actualRows.get(2 - 1);
    Assert.assertEquals(Integer.valueOf(row1.getRowIndex()), row1.getRowIndex());
    Assert.assertEquals("image_star", row1.getInfoIconImageName());
    // }
  }
}

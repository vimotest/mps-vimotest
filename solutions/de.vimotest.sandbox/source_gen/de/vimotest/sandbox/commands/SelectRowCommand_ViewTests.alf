namespace commands ;

private import Testing ;

class SelectRowCommand_ViewTests {
  
  private sut : SelectRowCommand_View  ;
  
  private testSetup : SelectRowCommand_ViewTestSetup  ;
  
  
  protected BeforeTest (  ) {
  this.testSetup = new SelectRowCommand_ViewTestSetupImpl (  );
   this.testSetup.Init (  );
 }
  
  
  public Select_Row_ListView_Call_given_when_select_row_1_in_MyListViewElements_then_MyListViewElements_has_2_rows (  ) {
  this.BuildSut (  );
   this.when_select_row_1_in_MyListViewElements (  );
   this.then_MyListViewElements_has_2_rows (  );
 }
  
  public Select_Row_ListView_Call_string_row_handle_given_when_select_row_ROW_B_in_MyStringRowHandleListViewElements_then_MyStringRowHandleListViewElements_has_2_rows (  ) {
  this.BuildSut (  );
   this.when_select_row_ROW_B_in_MyStringRowHandleListViewElements (  );
   this.then_MyStringRowHandleListViewElements_has_2_rows (  );
 }
  
  public Select_Row_TableView_Call_given_when_select_row_1_in_MyTableViewElements_then_MyTableViewElements_has_2_rows (  ) {
  this.BuildSut (  );
   this.when_select_row_1_in_MyTableViewElements (  );
   this.then_MyTableViewElements_has_2_rows (  );
 }
  
  public Select_Row_TableView_Call_string_row_handle_given_when_select_row_ROW_B_in_MyStringRowHandleTableViewElements_then_MyStringRowHandleTableViewElements_has_2_rows (  ) {
  this.BuildSut (  );
   this.when_select_row_ROW_B_in_MyStringRowHandleTableViewElements (  );
   this.then_MyStringRowHandleTableViewElements_has_2_rows (  );
 }
  
  public Select_Row_TreeView_Call_given_when_select_row_1_in_MyTreeViewElements_then_MyTreeViewElements_has_2_rows (  ) {
  this.BuildSut (  );
   this.when_select_row_1_in_MyTreeViewElements (  );
   this.then_MyTreeViewElements_has_2_rows (  );
 }
  
  public Select_Row_TreeView_Call_string_row_handle_given_when_select_row_ROW_B_in_MyStringRowHandleTreeViewElements_then_MyStringRowHandleTreeViewElements_has_2_rows (  ) {
  this.BuildSut (  );
   this.when_select_row_ROW_B_in_MyStringRowHandleTreeViewElements (  );
   this.then_MyStringRowHandleTreeViewElements_has_2_rows (  );
 }
  
  public Select_Multiple_Rows_given_when_select_rows_ROW_A_ROW_C_in_MyStringHandleMultiSelectRowListViewElements_then_MyStringHandleMultiSelectRowListViewElements_has_3_rows (  ) {
  this.BuildSut (  );
   this.when_select_rows_ROW_A_ROW_C_in_MyStringHandleMultiSelectRowListViewElements (  );
   this.then_MyStringHandleMultiSelectRowListViewElements_has_3_rows (  );
 }
  
  
  protected BuildSut (  ) {
  this.sut = this.testSetup.BuildSut (  );
 }
  
  
  // Given Helper Definitions

  
  // When Helper Definitions

  
  public when_select_row_1_in_MyListViewElements (  ) {
  this.sut.myListViewElementsRowSelected ( 1 );
 }
  
  public when_select_row_ROW_B_in_MyStringRowHandleListViewElements (  ) {
  this.sut.myStringRowHandleListViewElementsRowSelected ( "ROW_B" );
 }
  
  public when_select_row_1_in_MyTableViewElements (  ) {
  this.sut.myTableViewElementsRowSelected ( 1 );
 }
  
  public when_select_row_ROW_B_in_MyStringRowHandleTableViewElements (  ) {
  this.sut.myStringRowHandleTableViewElementsRowSelected ( "ROW_B" );
 }
  
  public when_select_row_1_in_MyTreeViewElements (  ) {
  this.sut.myTreeViewElementsRowSelected ( 1 );
 }
  
  public when_select_row_ROW_B_in_MyStringRowHandleTreeViewElements (  ) {
  this.sut.myStringRowHandleTreeViewElementsRowSelected ( "ROW_B" );
 }
  
  public when_select_rows_ROW_A_ROW_C_in_MyStringHandleMultiSelectRowListViewElements (  ) {
  this.sut.myStringHandleMultiSelectRowListViewElementsRowSelected ( new String [] { "ROW_A",  "ROW_C" } );
 }
  
  // Then Helper Definitions

  
  public then_MyListViewElements_has_2_rows (  ) {
  let actualRows: SelectRowCommand_ViewMyListViewElementsRow [] = this.sut.getMyListViewElementsListRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: SelectRowCommand_ViewMyListViewElementsRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertEqual ( "A", row0.getHeaderLabelText (  ) );
 }
   {
  let row1: SelectRowCommand_ViewMyListViewElementsRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertEqual ( "B", row1.getHeaderLabelText (  ) );
 }
 }
  
  public then_MyStringRowHandleListViewElements_has_2_rows (  ) {
  let actualRows: SelectRowCommand_ViewMyStringRowHandleListViewElementsRow [] = this.sut.getMyStringRowHandleListViewElementsListRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: SelectRowCommand_ViewMyStringRowHandleListViewElementsRow = actualRows[ 1 ];
   AssertEqual ( "ROW_A", row0.getRowHandle (  ) );
   AssertEqual ( "A", row0.getHeaderLabelText (  ) );
 }
   {
  let row1: SelectRowCommand_ViewMyStringRowHandleListViewElementsRow = actualRows[ 2 ];
   AssertEqual ( "ROW_B", row1.getRowHandle (  ) );
   AssertEqual ( "B", row1.getHeaderLabelText (  ) );
 }
 }
  
  public then_MyTableViewElements_has_2_rows (  ) {
  let actualRows: SelectRowCommand_ViewMyTableViewElementsRow [] = this.sut.getMyTableViewElementsTableRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: SelectRowCommand_ViewMyTableViewElementsRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertEqual ( "A", row0.getColumnCellLabelText (  ) );
 }
   {
  let row1: SelectRowCommand_ViewMyTableViewElementsRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertEqual ( "B", row1.getColumnCellLabelText (  ) );
 }
 }
  
  public then_MyStringRowHandleTableViewElements_has_2_rows (  ) {
  let actualRows: SelectRowCommand_ViewMyStringRowHandleTableViewElementsRow [] = this.sut.getMyStringRowHandleTableViewElementsTableRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: SelectRowCommand_ViewMyStringRowHandleTableViewElementsRow = actualRows[ 1 ];
   AssertEqual ( "ROW_A", row0.getRowHandle (  ) );
   AssertEqual ( "A", row0.getColumnCellLabelText (  ) );
 }
   {
  let row1: SelectRowCommand_ViewMyStringRowHandleTableViewElementsRow = actualRows[ 2 ];
   AssertEqual ( "ROW_B", row1.getRowHandle (  ) );
   AssertEqual ( "B", row1.getColumnCellLabelText (  ) );
 }
 }
  
  public then_MyTreeViewElements_has_2_rows (  ) {
  let actualRows: SelectRowCommand_ViewMyTreeViewElementsRow [] = this.sut.getMyTreeViewElementsTreeRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: SelectRowCommand_ViewMyTreeViewElementsRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertEqual ( 0, row0.getRowDepth (  ) );
   AssertEqual ( "A", row0.getColumnCellLabelText (  ) );
 }
   {
  let row1: SelectRowCommand_ViewMyTreeViewElementsRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertEqual ( 0, row1.getRowDepth (  ) );
   AssertEqual ( "B", row1.getColumnCellLabelText (  ) );
 }
 }
  
  public then_MyStringRowHandleTreeViewElements_has_2_rows (  ) {
  let actualRows: SelectRowCommand_ViewMyStringRowHandleTreeViewElementsRow [] = this.sut.getMyStringRowHandleTreeViewElementsTreeRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: SelectRowCommand_ViewMyStringRowHandleTreeViewElementsRow = actualRows[ 1 ];
   AssertEqual ( "ROW_A", row0.getRowHandle (  ) );
   AssertEqual ( 0, row0.getRowDepth (  ) );
   AssertEqual ( "A", row0.getColumnCellLabelText (  ) );
 }
   {
  let row1: SelectRowCommand_ViewMyStringRowHandleTreeViewElementsRow = actualRows[ 2 ];
   AssertEqual ( "ROW_B", row1.getRowHandle (  ) );
   AssertEqual ( 0, row1.getRowDepth (  ) );
   AssertEqual ( "B", row1.getColumnCellLabelText (  ) );
 }
 }
  
  public then_MyStringHandleMultiSelectRowListViewElements_has_3_rows (  ) {
  let actualRows: SelectRowCommand_ViewMyStringHandleMultiSelectRowListViewElementsRow [] = this.sut.getMyStringHandleMultiSelectRowListViewElementsListRows (  );
   AssertEqual ( 3, actualRows->size (  ) );
   {
  let row0: SelectRowCommand_ViewMyStringHandleMultiSelectRowListViewElementsRow = actualRows[ 1 ];
   AssertEqual ( "ROW_A", row0.getRowHandle (  ) );
   AssertEqual ( "A", row0.getHeaderLabelText (  ) );
 }
   {
  let row1: SelectRowCommand_ViewMyStringHandleMultiSelectRowListViewElementsRow = actualRows[ 2 ];
   AssertEqual ( "ROW_B", row1.getRowHandle (  ) );
   AssertEqual ( "B", row1.getHeaderLabelText (  ) );
 }
   {
  let row2: SelectRowCommand_ViewMyStringHandleMultiSelectRowListViewElementsRow = actualRows[ 3 ];
   AssertEqual ( "ROW_C", row2.getRowHandle (  ) );
   AssertEqual ( "C", row2.getHeaderLabelText (  ) );
 }
 }
}
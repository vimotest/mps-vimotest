namespace widgetassertions ;

private import Testing ;

class ComboBoxes_ViewTest {
  
  private sut : ComboBoxes_View  ;
  
  private testSetup : ComboBoxes_ViewTestSetup  ;
  
  
  protected BeforeTest (  ) {
    this.testSetup = new ComboBoxes_ViewTestSetupImpl (  );

    this.testSetup.Init (  );

  }
  
  
  public My_Scenario_given_empty_context_when_then_MyOptions_has_3_entries_and_selected_A1_and_is_enabled_and_is_visible_and_MyOptionsWithFreeText_has_2_entries_and_and_shows_text_My_Free_Text_ (  ) {
    this.given_empty_context (  );

    this.BuildSut (  );

    this.then_MyOptions_has_3_entries_and_selected_A1_and_is_enabled_and_is_visible (  );

    this.then_MyOptionsWithFreeText_has_2_entries_and_and_shows_text_My_Free_Text_ (  );

  }
  
  public ComboBox_disabled_given_when_then_MyOptions_has_1_entries_and_selected_A_and_is_not_enabled (  ) {
    this.BuildSut (  );

    this.then_MyOptions_has_1_entries_and_selected_A_and_is_not_enabled (  );

  }
  
  public ComboBox_invisible_given_when_then_MyOptions_has_1_entries_and_selected_A_and_is_not_visible (  ) {
    this.BuildSut (  );

    this.then_MyOptions_has_1_entries_and_selected_A_and_is_not_visible (  );

  }
  
  
  protected BuildSut (  ) {
    this.sut = this.testSetup.BuildSut (  );

  }
  
  
  // Given Helper Definitions

  
  public given_empty_context (  ) {    
  }
  
  // When Helper Definitions

  
  // Then Helper Definitions

  
  public then_MyOptions_has_3_entries_and_selected_A1_and_is_enabled_and_is_visible (  ) {
    let actualMyOptionsEntries: String [] = this.sut.getMyOptionsComboBoxEntries (  );

    AssertEqual ( 3, actualMyOptionsEntries->size (  ) );

    AssertEqual ( "A1", actualMyOptionsEntries[ 1 ] ?? "" );

    AssertEqual ( "A2", actualMyOptionsEntries[ 2 ] ?? "" );

    AssertEqual ( "A3", actualMyOptionsEntries[ 3 ] ?? "" );

    AssertEqual ( "A1", this.sut.getMyOptionsComboBoxSelectedEntry (  ) );

    AssertTrue ( this.sut.getIsMyOptionsComboBoxEnabled (  ) );

    AssertTrue ( this.sut.getIsMyOptionsComboBoxVisible (  ) );

  }
  
  public then_MyOptionsWithFreeText_has_2_entries_and_and_shows_text_My_Free_Text_ (  ) {
    let actualMyOptionsWithFreeTextEntries: String [] = this.sut.getMyOptionsWithFreeTextComboBoxEntries (  );

    AssertEqual ( 2, actualMyOptionsWithFreeTextEntries->size (  ) );

    AssertEqual ( "E1", actualMyOptionsWithFreeTextEntries[ 1 ] ?? "" );

    AssertEqual ( "E2", actualMyOptionsWithFreeTextEntries[ 2 ] ?? "" );

    AssertEqual ( null, this.sut.getMyOptionsWithFreeTextComboBoxSelectedEntry (  ) );

    AssertEqual ( "My Free Text", this.sut.getMyOptionsWithFreeTextComboBoxText (  ) );

  }
  
  public then_MyOptions_has_1_entries_and_selected_A_and_is_not_enabled (  ) {
    let actualMyOptionsEntries_1: String [] = this.sut.getMyOptionsComboBoxEntries (  );

    AssertEqual ( 1, actualMyOptionsEntries_1->size (  ) );

    AssertEqual ( "A", actualMyOptionsEntries_1[ 1 ] ?? "" );

    AssertEqual ( "A", this.sut.getMyOptionsComboBoxSelectedEntry (  ) );

    AssertFalse ( this.sut.getIsMyOptionsComboBoxEnabled (  ) );

  }
  
  public then_MyOptions_has_1_entries_and_selected_A_and_is_not_visible (  ) {
    let actualMyOptionsEntries_2: String [] = this.sut.getMyOptionsComboBoxEntries (  );

    AssertEqual ( 1, actualMyOptionsEntries_2->size (  ) );

    AssertEqual ( "A", actualMyOptionsEntries_2[ 1 ] ?? "" );

    AssertEqual ( "A", this.sut.getMyOptionsComboBoxSelectedEntry (  ) );

    AssertFalse ( this.sut.getIsMyOptionsComboBoxVisible (  ) );

  }
}
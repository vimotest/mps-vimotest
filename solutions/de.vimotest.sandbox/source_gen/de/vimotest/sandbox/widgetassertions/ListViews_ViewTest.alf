namespace widgetassertions ;

private import Testing ;

class ListViews_ViewTest {
  
  private sut : ListViews_View  ;
  
  private contextProvider : ListViews_ViewContextProvider  ;
  
  
  protected BeforeTest (  ) {
  this.contextProvider = new ListViews_ViewContextProviderImpl (  );
   this.contextProvider.Init (  );
 }
  
  
  public My_Scenario_given_empty_context_when_then_MyListOfLabel_has_4_rows_and_selected_row_index_3_and_MyListOfImages_has_2_rows_and_MyCheckboxes_has_3_rows_and_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1_and_MyListWithMultiRowSelection_has_3_rows_and_selected_row_indices_0_2_ (  ) {
  this.given_empty_context (  );
   this.BuildSut (  );
   this.then_MyListOfLabel_has_4_rows_and_selected_row_index_3 (  );
   this.then_MyListOfImages_has_2_rows (  );
   this.then_MyCheckboxes_has_3_rows (  );
   this.then_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1 (  );
   this.then_MyListWithMultiRowSelection_has_3_rows_and_selected_row_indices_0_2_ (  );
 }
  
  public List_Ignore_Column_given_empty_context_when_then_MyListOfLabel_has_4_rows (  ) {
  this.given_empty_context_1 (  );
   this.BuildSut (  );
   this.then_MyListOfLabel_has_4_rows (  );
 }
  
  public List_Ignore_Cell_given_empty_context_when_then_MyListOfLabel_has_4_rows (  ) {
  this.given_empty_context_2 (  );
   this.BuildSut (  );
   this.then_MyListOfLabel_has_4_rows_1 (  );
 }
  
  
  protected BuildSut (  ) {
  this.sut = this.contextProvider.BuildSut (  );
 }
  
  
  // Given Helper Definitions

  
  public given_empty_context (  ) {     }
  
  public given_empty_context_1 (  ) {     }
  
  public given_empty_context_2 (  ) {     }
  
  // When Helper Definitions

  
  // Then Helper Definitions

  
  public then_MyListOfLabel_has_4_rows_and_selected_row_index_3 (  ) {
  let actualRows: ListViews_ViewMyListOfLabelRow [] = this.sut.getMyListOfLabelListWidgetListRows (  );
   AssertEqual ( 4, actualRows->size (  ) );
   {
  let row0: ListViews_ViewMyListOfLabelRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertEqual ( "A", row0.getMyValueLabelText (  ) );
   AssertFalse ( row0.getIsMyValueLabelVisibility (  ) );
   AssertTrue ( row0.getIsMyValueLabelEnabled (  ) );
 }
   {
  let row1: ListViews_ViewMyListOfLabelRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertEqual ( "B", row1.getMyValueLabelText (  ) );
   AssertFalse ( row1.getIsMyValueLabelEnabled (  ) );
 }
   {
  let row2: ListViews_ViewMyListOfLabelRow = actualRows[ 3 ];
   AssertEqual ( 2, row2.getRowIndex (  ) );
   AssertEqual ( "C", row2.getMyValueLabelText (  ) );
   AssertTrue ( row2.getIsMyValueLabelEnabled (  ) );
 }
   {
  let row3: ListViews_ViewMyListOfLabelRow = actualRows[ 4 ];
   AssertEqual ( 3, row3.getRowIndex (  ) );
   AssertEqual ( "D", row3.getMyValueLabelText (  ) );
   AssertTrue ( row3.getIsMyValueLabelVisibility (  ) );
 }
   AssertEqual ( 3, this.sut.getMyListOfLabelListSelectedRow (  ) );
 }
  
  public then_MyListOfImages_has_2_rows (  ) {
  let actualRows: ListViews_ViewMyListOfImagesRow [] = this.sut.getMyListOfImagesListWidgetListRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: ListViews_ViewMyListOfImagesRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertEqual ( "image_star", row0.getMyInfoImageImageSource (  ) );
 }
   {
  let row1: ListViews_ViewMyListOfImagesRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertEqual ( "image_circle", row1.getMyInfoImageImageSource (  ) );
 }
 }
  
  public then_MyCheckboxes_has_3_rows (  ) {
  let actualRows: ListViews_ViewMyCheckboxesRow [] = this.sut.getMyCheckboxesListWidgetListRows (  );
   AssertEqual ( 3, actualRows->size (  ) );
   {
  let row0: ListViews_ViewMyCheckboxesRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertTrue ( row0.getIsHeaderCheckBoxChecked (  ) );
 }
   {
  let row1: ListViews_ViewMyCheckboxesRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertFalse ( row1.getIsHeaderCheckBoxChecked (  ) );
 }
   {
  let row2: ListViews_ViewMyCheckboxesRow = actualRows[ 3 ];
   AssertEqual ( 2, row2.getRowIndex (  ) );
   AssertTrue ( row2.getIsHeaderCheckBoxChecked (  ) );
   AssertEqual ( "My Label", row2.getHeaderCheckBoxText (  ) );
 }
 }
  
  public then_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1 (  ) {
  let actualRows: ListViews_ViewMyStringRowHandlesRow [] = this.sut.getMyStringRowHandlesListWidgetListRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: ListViews_ViewMyStringRowHandlesRow = actualRows[ 1 ];
   AssertEqual ( "ROW0", row0.getRowHandle (  ) );
   AssertEqual ( "A", row0.getValuesLabelText (  ) );
 }
   {
  let row1: ListViews_ViewMyStringRowHandlesRow = actualRows[ 2 ];
   AssertEqual ( "ROW1", row1.getRowHandle (  ) );
   AssertEqual ( "B", row1.getValuesLabelText (  ) );
 }
   AssertEqual ( "ROW1", this.sut.getMyStringRowHandlesListSelectedRow (  ) );
 }
  
  public then_MyListWithMultiRowSelection_has_3_rows_and_selected_row_indices_0_2_ (  ) {
  let actualRows: ListViews_ViewMyListWithMultiRowSelectionRow [] = this.sut.getMyListWithMultiRowSelectionListWidgetListRows (  );
   AssertEqual ( 3, actualRows->size (  ) );
   {
  let row0: ListViews_ViewMyListWithMultiRowSelectionRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertEqual ( "A", row0.getHeaderLabelText (  ) );
 }
   {
  let row1: ListViews_ViewMyListWithMultiRowSelectionRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertEqual ( "B", row1.getHeaderLabelText (  ) );
 }
   {
  let row2: ListViews_ViewMyListWithMultiRowSelectionRow = actualRows[ 3 ];
   AssertEqual ( 2, row2.getRowIndex (  ) );
   AssertEqual ( "C", row2.getHeaderLabelText (  ) );
 }
   let actualMyListWithMultiRowSelectionSelectedRowHandles: Integer [] = this.sut.getMyListWithMultiRowSelectionListSelectedRows (  );
   AssertEqual ( 2, actualMyListWithMultiRowSelectionSelectedRowHandles->size (  ) );
   AssertEqual ( 0, actualMyListWithMultiRowSelectionSelectedRowHandles[ 1 ] ?? 0 );
   AssertEqual ( 2, actualMyListWithMultiRowSelectionSelectedRowHandles[ 2 ] ?? 0 );
 }
  
  public then_MyListOfLabel_has_4_rows (  ) {
  let actualRows: ListViews_ViewMyListOfLabelRow [] = this.sut.getMyListOfLabelListWidgetListRows (  );
   AssertEqual ( 4, actualRows->size (  ) );
   {
  let row0: ListViews_ViewMyListOfLabelRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
 }
   {
  let row1: ListViews_ViewMyListOfLabelRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
 }
   {
  let row2: ListViews_ViewMyListOfLabelRow = actualRows[ 3 ];
   AssertEqual ( 2, row2.getRowIndex (  ) );
 }
   {
  let row3: ListViews_ViewMyListOfLabelRow = actualRows[ 4 ];
   AssertEqual ( 3, row3.getRowIndex (  ) );
 }
 }
  
  public then_MyListOfLabel_has_4_rows_1 (  ) {
  let actualRows: ListViews_ViewMyListOfLabelRow [] = this.sut.getMyListOfLabelListWidgetListRows (  );
   AssertEqual ( 4, actualRows->size (  ) );
   {
  let row0: ListViews_ViewMyListOfLabelRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
 }
   {
  let row1: ListViews_ViewMyListOfLabelRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertEqual ( "B", row1.getMyValueLabelText (  ) );
   AssertFalse ( row1.getIsMyValueLabelEnabled (  ) );
 }
   {
  let row2: ListViews_ViewMyListOfLabelRow = actualRows[ 3 ];
   AssertEqual ( 2, row2.getRowIndex (  ) );
 }
   {
  let row3: ListViews_ViewMyListOfLabelRow = actualRows[ 4 ];
   AssertEqual ( 3, row3.getRowIndex (  ) );
   AssertEqual ( "D", row3.getMyValueLabelText (  ) );
   AssertTrue ( row3.getIsMyValueLabelVisibility (  ) );
 }
 }
}
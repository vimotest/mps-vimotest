namespace widgetassertions ;

private import Testing ;

class LowLevelFields_ViewTests {
  
  private sut : LowLevelFields_View  ;
  
  private contextProvider : LowLevelFields_ViewContextProvider  ;
  
  
  protected BeforeTest (  ) {
  this.contextProvider = new LowLevelFields_ViewContextProviderImpl (  );
   this.contextProvider.Init (  );
 }
  
  
  public Primitive_Field_Asserts_given_when_then_MyBool_is_true_and_MyInt_is_42_and_MyString_is_text_ (  ) {
  this.BuildSut (  );
   this.then_MyBool_is_true (  );
   this.then_MyInt_is_42 (  );
   this.then_MyString_is_text_ (  );
 }
  
  public Primitive_List_Field_Asserts_given_when_then_MyStrings_is_new_String____A___B__ (  ) {
  this.BuildSut (  );
   this.then_MyStrings_is_new_String____A___B__ (  );
 }
  
  public Rowbased_Primitive_Fields_given_when_then_CustomListRowField_has_1_rows_and_CustomTableRowField_has_1_rows_and_CustomTreeRowField_has_1_rows (  ) {
  this.BuildSut (  );
   this.then_CustomListRowField_has_1_rows (  );
   this.then_CustomTableRowField_has_1_rows (  );
   this.then_CustomTreeRowField_has_1_rows (  );
 }
  
  
  protected BuildSut (  ) {
  this.sut = this.contextProvider.BuildSut (  );
 }
  
  
  // Given Helper Definitions

  
  // When Helper Definitions

  
  // Then Helper Definitions

  
  public then_MyBool_is_true (  ) {
  AssertTrue ( this.sut.getMyBool (  ) );
 }
  
  public then_MyInt_is_42 (  ) {
  AssertEqual ( 42, this.sut.getMyInt (  ) );
 }
  
  public then_MyString_is_text_ (  ) {
  AssertEqual ( "text", this.sut.getMyString (  ) );
 }
  
  public then_MyStrings_is_new_String____A___B__ (  ) {
  let actualMyStrings: String [] = this.sut.getMyStrings (  );
   AssertEqual ( "A", actualMyStrings[ 1 ] ?? "" );
   AssertEqual ( "B", actualMyStrings[ 2 ] ?? "" );
 }
  
  public then_CustomListRowField_has_1_rows (  ) {
  let actualRows: LowLevelFields_ViewCustomListRowFieldRow [] = this.sut.getCustomListRowFieldListRows (  );
   AssertEqual ( 1, actualRows->size (  ) );
   {
  let row0: LowLevelFields_ViewCustomListRowFieldRow = actualRows[ 1 ];
   AssertEqual ( "0", row0.getRowHandle (  ) );
   AssertEqual ( "", row0.getHeaderLabelText (  ) );
   let actualAdditionalStrings: String [] = row0.getAdditionalStrings (  );
   AssertEqual ( "A", actualAdditionalStrings[ 1 ] ?? "" );
 }
 }
  
  public then_CustomTableRowField_has_1_rows (  ) {
  let actualRows: LowLevelFields_ViewCustomTableRowFieldRow [] = this.sut.getCustomTableRowFieldTableRows (  );
   AssertEqual ( 1, actualRows->size (  ) );
   {
  let row0: LowLevelFields_ViewCustomTableRowFieldRow = actualRows[ 1 ];
   AssertEqual ( "0", row0.getRowHandle (  ) );
   AssertEqual ( "", row0.getHeaderLabelText (  ) );
   AssertFalse ( row0.getAdditionalBool (  ) );
 }
 }
  
  public then_CustomTreeRowField_has_1_rows (  ) {
  let actualRows: LowLevelFields_ViewCustomTreeRowFieldRow [] = this.sut.getCustomTreeRowFieldTreeRows (  );
   AssertEqual ( 1, actualRows->size (  ) );
   {
  let row0: LowLevelFields_ViewCustomTreeRowFieldRow = actualRows[ 1 ];
   AssertEqual ( "9", row0.getRowHandle (  ) );
   AssertEqual ( 0, row0.getRowDepth (  ) );
   AssertEqual ( "", row0.getHeaderLabelText (  ) );
   AssertEqual ( 42, row0.getAdditionalInt (  ) );
 }
 }
}
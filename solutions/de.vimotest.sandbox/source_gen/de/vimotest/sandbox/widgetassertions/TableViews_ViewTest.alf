namespace widgetassertions ;

private import Testing ;

class TableViews_ViewTest {
  
  private sut : TableViews_View  ;
  
  private testSetup : TableViews_ViewTestSetup  ;
  
  
  protected BeforeTest (  ) {
  this.testSetup = new TableViews_ViewTestSetupImpl (  );
   this.testSetup.Init (  );
 }
  
  
  public My_Scenario_given_empty_context_when_then_MyElements_has_2_rows_and_selected_row_index_1_and_is_visible_and_is_enabled_and_Description_is_not_visible_and_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1 (  ) {
  this.given_empty_context (  );
   this.BuildSut (  );
   this.then_MyElements_has_2_rows_and_selected_row_index_1_and_is_visible_and_is_enabled_and_Description_is_not_visible (  );
   this.then_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1 (  );
 }
  
  public Table_Ignore_Columns_given_empty_context_when_then_MyElements_has_2_rows (  ) {
  this.given_empty_context (  );
   this.BuildSut (  );
   this.then_MyElements_has_2_rows (  );
 }
  
  
  protected BuildSut (  ) {
  this.sut = this.testSetup.BuildSut (  );
 }
  
  
  // Given Helper Definitions

  
  public given_empty_context (  ) {     }
  
  // When Helper Definitions

  
  // Then Helper Definitions

  
  public then_MyElements_has_2_rows_and_selected_row_index_1_and_is_visible_and_is_enabled_and_Description_is_not_visible (  ) {
  let actualRows: TableViews_ViewMyElementsRow [] = this.sut.getMyElementsTableRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: TableViews_ViewMyElementsRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertTrue ( row0.getIsIncludeCheckBoxChecked (  ) );
   AssertEqual ( "A", row0.getNameLabelText (  ) );
   AssertEqual ( "B", row0.getDescriptionLabelText (  ) );
   AssertEqual ( "image_info", row0.getInfoIconImageName (  ) );
 }
   {
  let row1: TableViews_ViewMyElementsRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertFalse ( row1.getIsIncludeCheckBoxChecked (  ) );
   AssertEqual ( "C", row1.getNameLabelText (  ) );
   AssertEqual ( "D", row1.getDescriptionLabelText (  ) );
   AssertEqual ( "image_star", row1.getInfoIconImageName (  ) );
 }
   AssertEqual ( 1, this.sut.getMyElementsTableSelectedRow (  ) );
   AssertTrue ( this.sut.getIsMyElementsTableVisible (  ) );
   AssertTrue ( this.sut.getIsMyElementsTableEnabled (  ) );
   AssertFalse ( this.sut.getIsMyElementsTableDescriptionColumnVisible (  ) );
 }
  
  public then_MyStringRowHandles_has_2_rows_and_selected_row_handle_ROW1 (  ) {
  let actualRows: TableViews_ViewMyStringRowHandlesRow [] = this.sut.getMyStringRowHandlesTableRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: TableViews_ViewMyStringRowHandlesRow = actualRows[ 1 ];
   AssertEqual ( "ROW0", row0.getRowHandle (  ) );
   AssertEqual ( "A", row0.getValuesLabelText (  ) );
 }
   {
  let row1: TableViews_ViewMyStringRowHandlesRow = actualRows[ 2 ];
   AssertEqual ( "ROW1", row1.getRowHandle (  ) );
   AssertEqual ( "B", row1.getValuesLabelText (  ) );
 }
   AssertEqual ( "ROW1", this.sut.getMyStringRowHandlesTableSelectedRow (  ) );
 }
  
  public then_MyElements_has_2_rows (  ) {
  let actualRows: TableViews_ViewMyElementsRow [] = this.sut.getMyElementsTableRows (  );
   AssertEqual ( 2, actualRows->size (  ) );
   {
  let row0: TableViews_ViewMyElementsRow = actualRows[ 1 ];
   AssertEqual ( 0, row0.getRowIndex (  ) );
   AssertEqual ( "A", row0.getNameLabelText (  ) );
 }
   {
  let row1: TableViews_ViewMyElementsRow = actualRows[ 2 ];
   AssertEqual ( 1, row1.getRowIndex (  ) );
   AssertEqual ( "image_star", row1.getInfoIconImageName (  ) );
 }
 }
}